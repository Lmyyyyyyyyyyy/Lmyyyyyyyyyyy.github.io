<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>chatroom_stage1_summary</title>
      <link href="/2025/09/07/chatroom-stage1-summary/"/>
      <url>/2025/09/07/chatroom-stage1-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="📌-聊天室项目-第一阶段总结"><a href="#📌-聊天室项目-第一阶段总结" class="headerlink" title="📌 聊天室项目 - 第一阶段总结"></a>📌 聊天室项目 - 第一阶段总结</h1><h2 id="🎯-阶段目标"><a href="#🎯-阶段目标" class="headerlink" title="🎯 阶段目标"></a>🎯 阶段目标</h2><ul><li>搭建一个基于 <strong>Spring Boot + WebSocket (SockJS + STOMP)</strong><br>的简易聊天室。</li><li>实现多人实时聊天功能，不同浏览器之间能够互相发送消息。</li><li>支持用户输入昵称，在聊天框中显示”昵称: 消息内容”。</li></ul><hr><h2 id="🖥️-后端部分"><a href="#🖥️-后端部分" class="headerlink" title="🖥️ 后端部分"></a>🖥️ 后端部分</h2><h3 id="1-ChatMessage-java-——-消息对象"><a href="#1-ChatMessage-java-——-消息对象" class="headerlink" title="1. ChatMessage.java —— 消息对象"></a>1. ChatMessage.java —— 消息对象</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMessage</span> {</span><br><span class="line">    <span class="keyword">private</span> String sender;   <span class="comment">// 发送者昵称</span></span><br><span class="line">    <span class="keyword">private</span> String content;  <span class="comment">// 消息内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-WebSocketConfig-java-——-WebSocket-配置"><a href="#2-WebSocketConfig-java-——-WebSocket-配置" class="headerlink" title="2. WebSocketConfig.java —— WebSocket 配置"></a>2. WebSocketConfig.java —— WebSocket 配置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> {</span><br><span class="line">        config.enableSimpleBroker(<span class="string">"/topic"</span>); <span class="comment">// 订阅前缀</span></span><br><span class="line">        config.setApplicationDestinationPrefixes(<span class="string">"/app"</span>); <span class="comment">// 应用前缀</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> {</span><br><span class="line">        registry.addEndpoint(<span class="string">"/chat-websocket"</span>).withSockJS(); <span class="comment">// 前端连接入口</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-ChatController-java-——-消息处理器"><a href="#3-ChatController-java-——-消息处理器" class="headerlink" title="3. ChatController.java —— 消息处理器"></a>3. ChatController.java —— 消息处理器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping("/chat")</span> <span class="comment">// 前端发到 /app/chat</span></span><br><span class="line">    <span class="meta">@SendTo("/topic/messages")</span> <span class="comment">// 广播给所有订阅 /topic/messages 的客户端</span></span><br><span class="line">    <span class="keyword">public</span> ChatMessage <span class="title function_">send</span><span class="params">(ChatMessage message)</span> {</span><br><span class="line">        System.out.println(<span class="string">"收到消息："</span> + message.getContent());</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="🌐-前端部分-chat-html"><a href="#🌐-前端部分-chat-html" class="headerlink" title="🌐 前端部分 (chat.html)"></a>🌐 前端部分 (chat.html)</h2><h3 id="1-连接-WebSocket"><a href="#1-连接-WebSocket" class="headerlink" title="1. 连接 WebSocket"></a>1. 连接 WebSocket</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">'/chat-websocket'</span>);</span><br><span class="line">stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span><br><span class="line"></span><br><span class="line">stompClient.<span class="title function_">connect</span>({}, <span class="keyword">function</span>(<span class="params">frame</span>) {</span><br><span class="line">    stompClient.<span class="title function_">subscribe</span>(<span class="string">'/topic/messages'</span>, <span class="keyword">function</span>(<span class="params">response</span>) {</span><br><span class="line">        <span class="keyword">const</span> message = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">body</span>);</span><br><span class="line">        <span class="title function_">showMessage</span>(message.<span class="property">sender</span> + <span class="string">": "</span> + message.<span class="property">content</span>);</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="2-发送消息"><a href="#2-发送消息" class="headerlink" title="2. 发送消息"></a>2. 发送消息</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stompClient.<span class="title function_">send</span>(<span class="string">"/app/chat"</span>, {}, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>({</span><br><span class="line">    <span class="attr">sender</span>: username,</span><br><span class="line">    <span class="attr">content</span>: msg</span><br><span class="line">}));</span><br></pre></td></tr></tbody></table></figure><h3 id="3-显示消息"><a href="#3-显示消息" class="headerlink" title="3. 显示消息"></a>3. 显示消息</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showMessage</span>(<span class="params">message</span>) {</span><br><span class="line">    <span class="keyword">const</span> chatBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"chat-box"</span>);</span><br><span class="line">    chatBox.<span class="property">innerHTML</span> += message + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    chatBox.<span class="property">scrollTop</span> = chatBox.<span class="property">scrollHeight</span>; <span class="comment">// 自动滚动到底部</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="🔄-消息流转时序图"><a href="#🔄-消息流转时序图" class="headerlink" title="🔄 消息流转时序图"></a>🔄 消息流转时序图</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant A as 浏览器A</span><br><span class="line">    participant WS as Spring WebSocket服务器</span><br><span class="line">    participant B as 浏览器B</span><br><span class="line"></span><br><span class="line">    A-&gt;&gt;WS: ① 连接 /chat-websocket</span><br><span class="line">    B-&gt;&gt;WS: ① 连接 /chat-websocket</span><br><span class="line">    Note over A, B: 两个浏览器都建立 WebSocket 长连接</span><br><span class="line"></span><br><span class="line">    A-&gt;&gt;WS: ② 发送消息到 /app/chat\n(sender: "yang", content: "hello")</span><br><span class="line">    WS-&gt;&gt;WS: ③ ChatController 处理消息</span><br><span class="line">    WS-&gt;&gt;B: ④ 广播消息到 /topic/messages\n{"sender":"yang","content":"hello"}</span><br><span class="line">    WS-&gt;&gt;A: ④ 广播消息到 /topic/messages\n{"sender":"yang","content":"hello"}</span><br><span class="line"></span><br><span class="line">    B-&gt;&gt;B: ⑤ 前端订阅收到消息，显示到聊天框</span><br><span class="line">    A-&gt;&gt;A: ⑤ 自己也收到消息，显示到聊天框</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="✅-阶段总结"><a href="#✅-阶段总结" class="headerlink" title="✅ 阶段总结"></a>✅ 阶段总结</h2><ul><li><strong>前端</strong>：通过 SockJS + STOMP 建立连接，订阅消息，发送消息。</li><li><strong>后端</strong>：通过 <code>@MessageMapping</code> 接收消息，<code>@SendTo</code> 广播消息。</li><li><strong>效果</strong>：支持多人实时聊天，消息会显示发送者昵称。</li></ul><hr><h2 id="🔜-下一步计划"><a href="#🔜-下一步计划" class="headerlink" title="🔜 下一步计划"></a>🔜 下一步计划</h2><ol><li><strong>消息持久化</strong>：将聊天记录存储到 MySQL，并支持历史消息查询。\</li><li><strong>用户系统</strong>：实现注册/登录，使用 JWT<br>做鉴权，保证昵称和身份唯一性。\</li><li><strong>群聊 / 私聊</strong>：支持多个房间和点对点消息。\</li><li><strong>分布式改造</strong>：使用 Redis Pub/Sub 实现多实例部署。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
          <category> Vue + Vite </category>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue + Vite </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类中的成分-代码块</title>
      <link href="/2025/08/13/lei-zhong-de-cheng-fen-dai-ma-kuai/"/>
      <url>/2025/08/13/lei-zhong-de-cheng-fen-dai-ma-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a><strong>代码块</strong></h2><p>代码块是类的5大成分之一（成员变量、构造器、方法、<strong>代码块</strong>、内部类）</p><h3 id="代码块分为两种："><a href="#代码块分为两种：" class="headerlink" title="代码块分为两种："></a>代码块分为两种：</h3><ul><li><p>静态代码块：</p><ul><li>格式：static{}</li><li>特点：类加载时自动执行，由于类只会加载一次，所以静态代码块也只会执行一次。</li><li>作用：完成类的初始化，例如：对静态变量的初始化赋值。</li></ul></li><li><p>实例代码类：</p><ul><li>格式：{}</li><li>特点：每次创建类对象时，执行实例代码块，并在构造器前执行。</li><li>作用：和构造器一样，都是用来完成对象的初始化的，例如：对实例变量进行初始化赋值。</li></ul></li><li><p>静态代码块</p></li></ul><figure class="highlight plaintext"><figcaption><span>[Java] [静态代码块]</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class codeDemo1 {</span><br><span class="line">    public static String schoolName;</span><br><span class="line">    public static String[] cards = new String[54];</span><br><span class="line">    static{</span><br><span class="line">        System.out.println("===静态代码块执行了===");</span><br><span class="line">        schoolName = "牛马程序员";</span><br><span class="line">        cards[0] = "A";</span><br><span class="line">        cards[1] = "2";</span><br><span class="line">        cards[1] = "3";</span><br><span class="line">        // ...</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    public static vod main(String[] args){</span><br><span class="line">        System.out.println("===main方法块执行了===");</span><br><span class="line">        System.out.println(schoolName);</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(cards));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>实例代码块</li></ul><figure class="highlight plaintext"><figcaption><span>[Java] [实例代码块]</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class codeDemo2 {</span><br><span class="line">    private String name;</span><br><span class="line">    private String[] direction = new String[4]; //实例变量</span><br><span class="line">    {</span><br><span class="line">        System.out.println("===实例代码块执行了===");</span><br><span class="line">        name = "Benjamin";</span><br><span class="line">        direction[0] = "N";</span><br><span class="line">        direction[1] = "S";</span><br><span class="line">        direction[2] = "E";</span><br><span class="line">        direction[3] = "W";</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    public static vod main(String[] args){</span><br><span class="line">        System.out.println("===main方法块执行了===");</span><br><span class="line">        new codeDemo2(); // 创建对象时自动执行实例代码块</span><br><span class="line">        new codeDemo2();</span><br><span class="line">        new codeDemo2();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢现在努力的自己。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/07/hello-world/"/>
      <url>/2025/08/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
